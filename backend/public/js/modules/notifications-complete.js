// Sistema Completo de Notificaciones Empresariales - v2.0
console.log('üì± [NOTIFICATIONS] Sistema de Notificaciones Empresariales v2.0 cargado');

// Estado global del m√≥dulo
let notificationsState = {
    notifications: [],
    templates: [],
    scheduledNotifications: [],
    autoGeneratedRules: [],
    currentFilter: 'all',
    lastUpdate: null
};

// Tipos de notificaciones autom√°ticas
const AUTO_NOTIFICATION_TYPES = {
    BIRTHDAY: 'birthday',
    CONTRACT_EXPIRY: 'contract_expiry',
    VACATION_REMINDER: 'vacation_reminder',
    TRAINING_DUE: 'training_due',
    DOCUMENT_EXPIRY: 'document_expiry',
    ATTENDANCE_ALERT: 'attendance_alert',
    PAYROLL_READY: 'payroll_ready',
    HOLIDAY_REMINDER: 'holiday_reminder',
    SAFETY_REMINDER: 'safety_reminder',
    PERFORMANCE_REVIEW: 'performance_review'
};

// Funci√≥n principal
function showNotificationsContent() {
    console.log('üì± [NOTIFICATIONS] Iniciando m√≥dulo de notificaciones');

    // Intentar m√∫ltiples formas de encontrar el elemento contenedor
    let content = document.getElementById('mainContent');

    if (!content) {
        console.warn('‚ö†Ô∏è [NOTIFICATIONS] mainContent no encontrado, buscando alternativas...');
        content = document.querySelector('.content');
        if (!content) {
            content = document.querySelector('#content');
        }
        if (!content) {
            // Como √∫ltimo recurso, crear el contenedor
            console.warn('‚ö†Ô∏è [NOTIFICATIONS] Creando contenedor temporal...');
            content = document.createElement('div');
            content.id = 'notificationsContainer';
            content.style.cssText = 'padding: 20px; width: 100%; min-height: 500px; background: white;';
            document.body.appendChild(content);
        }
    }

    console.log('‚úÖ [NOTIFICATIONS] Contenedor encontrado:', content.id || content.className);

    content.style.display = 'block';
    content.style.visibility = 'visible';
    content.style.opacity = '1';
    
    content.innerHTML = `
        <div class="tab-content active">
            <div class="notifications-container" style="padding: 20px;">
                <!-- Back Button -->
                <div style="margin-bottom: 20px;">
                    <button onclick="goBackToModules()" style="background: #6c757d; color: white; padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; gap: 10px; font-size: 14px; font-weight: 500; transition: all 0.3s;">
                        ‚Üê Volver a M√≥dulos
                    </button>
                </div>

                <!-- Header -->
                <div class="notifications-header" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 25px; border-radius: 12px; margin-bottom: 25px;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h2 style="margin: 0; font-size: 28px;">üì± Centro de Notificaciones</h2>
                            <p style="margin: 10px 0 0 0; opacity: 0.9;">Sistema Inteligente de Comunicaci√≥n Empresarial</p>
                        </div>
                        <div style="text-align: right;">
                            <div style="font-size: 24px; font-weight: bold;" id="activeNotificationsCount">0</div>
                            <div style="font-size: 12px; opacity: 0.9;">Notificaciones Activas</div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="quick-actions" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 25px;">
                    <button onclick="createNewNotification()" class="action-btn" style="background: #28a745; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 10px; font-size: 14px; font-weight: 500; transition: all 0.3s;">
                        <span style="font-size: 20px;">‚ûï</span> Nueva Notificaci√≥n
                    </button>
                    <button onclick="showNotificationTemplates()" class="action-btn" style="background: #17a2b8; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 10px; font-size: 14px; font-weight: 500; transition: all 0.3s;">
                        <span style="font-size: 20px;">üìã</span> Plantillas
                    </button>
                    <button onclick="showScheduledNotifications()" class="action-btn" style="background: #ffc107; color: #333; padding: 15px; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 10px; font-size: 14px; font-weight: 500; transition: all 0.3s;">
                        <span style="font-size: 20px;">‚è∞</span> Programadas
                    </button>
                    <button onclick="configureAutoNotifications()" class="action-btn" style="background: #6f42c1; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer; display: flex; align-items: center; justify-content: center; gap: 10px; font-size: 14px; font-weight: 500; transition: all 0.3s;">
                        <span style="font-size: 20px;">ü§ñ</span> Autom√°ticas
                    </button>
                </div>

                <!-- Tabs -->
                <div class="notifications-tabs" style="background: white; border-radius: 12px; padding: 20px; margin-bottom: 25px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                    <div style="display: flex; gap: 10px; margin-bottom: 20px; border-bottom: 2px solid #f0f0f0; padding-bottom: 10px;">
                        <button onclick="filterNotifications('all')" class="tab-btn active" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
                            Todas
                        </button>
                        <button onclick="filterNotifications('sent')" class="tab-btn" style="padding: 10px 20px; background: #f0f0f0; color: #333; border: none; border-radius: 5px; cursor: pointer;">
                            Enviadas
                        </button>
                        <button onclick="filterNotifications('pending')" class="tab-btn" style="padding: 10px 20px; background: #f0f0f0; color: #333; border: none; border-radius: 5px; cursor: pointer;">
                            Pendientes
                        </button>
                        <button onclick="filterNotifications('read')" class="tab-btn" style="padding: 10px 20px; background: #f0f0f0; color: #333; border: none; border-radius: 5px; cursor: pointer;">
                            Le√≠das
                        </button>
                        <button onclick="filterNotifications('automatic')" class="tab-btn" style="padding: 10px 20px; background: #f0f0f0; color: #333; border: none; border-radius: 5px; cursor: pointer;">
                            Autom√°ticas
                        </button>
                        <button onclick="filterNotifications('absence')" class="tab-btn" style="padding: 10px 20px; background: #f0f0f0; color: #333; border: none; border-radius: 5px; cursor: pointer;">
                            üè• Ausencias
                        </button>
                        <button onclick="filterNotifications('legal')" class="tab-btn" style="padding: 10px 20px; background: #f0f0f0; color: #333; border: none; border-radius: 5px; cursor: pointer;">
                            ‚öñÔ∏è Fehacientes
                        </button>
                    </div>
                    
                    <div id="notificationsList"></div>
                </div>

                <!-- Auto-Generated Notifications Section -->
                <div class="auto-notifications" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); border-radius: 12px; padding: 20px; margin-bottom: 25px; color: white;">
                    <h3 style="margin: 0 0 15px 0;">ü§ñ Notificaciones Autom√°ticas Activas</h3>
                    <div id="autoNotificationsList" style="display: grid; gap: 10px;">
                        <!-- Se llenar√° din√°micamente -->
                    </div>
                </div>

                <!-- Statistics -->
                <div class="statistics" style="background: white; border-radius: 12px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                    <h3 style="margin: 0 0 20px 0; color: #333;">üìä Estad√≠sticas del Sistema</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        <div class="stat-card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 15px; border-radius: 8px; color: white; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold;" id="totalSentToday">0</div>
                            <div style="font-size: 12px; opacity: 0.9;">Enviadas Hoy</div>
                        </div>
                        <div class="stat-card" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); padding: 15px; border-radius: 8px; color: white; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold;" id="totalPending">0</div>
                            <div style="font-size: 12px; opacity: 0.9;">Pendientes</div>
                        </div>
                        <div class="stat-card" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); padding: 15px; border-radius: 8px; color: white; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold;" id="totalRead">0</div>
                            <div style="font-size: 12px; opacity: 0.9;">Le√≠das</div>
                        </div>
                        <div class="stat-card" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); padding: 15px; border-radius: 8px; color: white; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold;" id="autoGenerated">0</div>
                            <div style="font-size: 12px; opacity: 0.9;">Auto-generadas</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;

    // Inicializar el sistema
    initializeNotificationSystem();
    loadNotifications();
    startAutoNotificationEngine();
    updateStatistics();
}

// Crear nueva notificaci√≥n
function createNewNotification() {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed; top: 0; left: 0; right: 0; bottom: 0;
        background: rgba(0,0,0,0.5); display: flex; align-items: center;
        justify-content: center; z-index: 10000;
    `;
    
    modal.innerHTML = `
        <div style="background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 600px; max-height: 90vh; overflow-y: auto;">
            <h3 style="margin: 0 0 20px 0; color: #333;">üìù Crear Nueva Notificaci√≥n</h3>
            
            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; color: #666; font-size: 14px;">Tipo de Notificaci√≥n</label>
                <select id="notificationType" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    <option value="general">üì¢ General</option>
                    <option value="urgent">üö® Urgente</option>
                    <option value="info">‚ÑπÔ∏è Informativa</option>
                    <option value="reminder">‚è∞ Recordatorio</option>
                    <option value="celebration">üéâ Celebraci√≥n</option>
                    <option value="policy">üìã Pol√≠tica/Normativa</option>
                    <option value="training">üìö Capacitaci√≥n</option>
                    <option value="safety">‚ö†Ô∏è Seguridad</option>
                </select>
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; color: #666; font-size: 14px;">Destinatarios</label>
                <select id="recipients" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    <option value="all">Todos los empleados</option>
                    <option value="department">Por departamento</option>
                    <option value="role">Por rol</option>
                    <option value="specific">Empleados espec√≠ficos</option>
                    <option value="active">Solo empleados activos</option>
                </select>
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; color: #666; font-size: 14px;">Asunto</label>
                <input type="text" id="notificationSubject" placeholder="Ej: Reuni√≥n general del viernes" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; color: #666; font-size: 14px;">Mensaje</label>
                <textarea id="notificationMessage" rows="5" placeholder="Escribe tu mensaje aqu√≠..." style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; resize: vertical;"></textarea>
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: block; margin-bottom: 5px; color: #666; font-size: 14px;">Prioridad</label>
                <select id="priority" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                    <option value="low">Baja</option>
                    <option value="medium" selected>Media</option>
                    <option value="high">Alta</option>
                    <option value="critical">Cr√≠tica</option>
                </select>
            </div>

            <div style="margin-bottom: 15px;">
                <label style="display: flex; align-items: center; gap: 10px; cursor: pointer;">
                    <input type="checkbox" id="scheduleNotification">
                    <span style="color: #666; font-size: 14px;">Programar env√≠o</span>
                </label>
            </div>

            <div id="scheduleOptions" style="display: none; margin-bottom: 15px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
                <label style="display: block; margin-bottom: 5px; color: #666; font-size: 14px;">Fecha y hora de env√≠o</label>
                <input type="datetime-local" id="scheduleDateTime" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            </div>

            <div style="display: flex; gap: 10px; justify-content: flex-end;">
                <button onclick="this.closest('.modal').remove()" style="padding: 10px 20px; background: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Cancelar
                </button>
                <button onclick="sendNotification()" style="padding: 10px 20px; background: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    Enviar Notificaci√≥n
                </button>
            </div>
        </div>
    `;
    
    modal.classList.add('modal');
    document.body.appendChild(modal);
    
    // Toggle schedule options
    document.getElementById('scheduleNotification').addEventListener('change', function(e) {
        document.getElementById('scheduleOptions').style.display = e.target.checked ? 'block' : 'none';
    });
}

// Enviar notificaci√≥n
function sendNotification() {
    const type = document.getElementById('notificationType').value;
    const recipients = document.getElementById('recipients').value;
    const subject = document.getElementById('notificationSubject').value;
    const message = document.getElementById('notificationMessage').value;
    const priority = document.getElementById('priority').value;
    const scheduled = document.getElementById('scheduleNotification').checked;
    const scheduleDateTime = document.getElementById('scheduleDateTime').value;
    
    if (!subject || !message) {
        alert('Por favor completa todos los campos requeridos');
        return;
    }
    
    const notification = {
        id: Date.now(),
        type,
        recipients,
        subject,
        message,
        priority,
        status: scheduled ? 'scheduled' : 'sent',
        scheduledFor: scheduled ? scheduleDateTime : null,
        createdAt: new Date().toISOString(),
        sentAt: scheduled ? null : new Date().toISOString(),
        readBy: [],
        createdBy: 'Admin'
    };
    
    notificationsState.notifications.push(notification);
    
    if (scheduled) {
        notificationsState.scheduledNotifications.push(notification);
        alert('‚úÖ Notificaci√≥n programada exitosamente');
    } else {
        alert('‚úÖ Notificaci√≥n enviada exitosamente');
    }
    
    document.querySelector('.modal').remove();
    loadNotifications();
    updateStatistics();
}

// Sistema de notificaciones autom√°ticas
function startAutoNotificationEngine() {
    console.log('ü§ñ [AUTO-NOTIFICATIONS] Iniciando motor de notificaciones autom√°ticas');
    
    // Generar notificaciones autom√°ticas cada minuto
    setInterval(() => {
        checkBirthdays();
        checkContractExpiry();
        checkVacationReminders();
        checkTrainingDue();
        checkDocumentExpiry();
        checkAttendanceAlerts();
        generatePayrollNotifications();
        generateHolidayReminders();
        generateSafetyReminders();
    }, 60000); // Cada minuto
    
    // Ejecutar inmediatamente al cargar
    setTimeout(() => {
        checkBirthdays();
        checkContractExpiry();
        generateSafetyReminders();
    }, 1000);
}

// Verificar cumplea√±os
function checkBirthdays() {
    const today = new Date();
    const todayStr = `${today.getDate()}/${today.getMonth() + 1}`;
    
    // Simular empleados con cumplea√±os
    const birthdayEmployees = [
        { name: 'Juan P√©rez', date: todayStr },
        { name: 'Mar√≠a Garc√≠a', date: todayStr }
    ];
    
    if (Math.random() > 0.7) { // 30% de probabilidad
        const employee = birthdayEmployees[Math.floor(Math.random() * birthdayEmployees.length)];
        const notification = {
            id: Date.now(),
            type: 'celebration',
            subject: `üéÇ ¬°Feliz cumplea√±os ${employee.name}!`,
            message: `Hoy es el cumplea√±os de ${employee.name}. ¬°√önete a las felicitaciones!`,
            priority: 'low',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'all',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
        showAutoNotification(notification);
    }
}

// Verificar vencimiento de contratos
function checkContractExpiry() {
    if (Math.random() > 0.9) { // 10% de probabilidad
        const notification = {
            id: Date.now(),
            type: 'urgent',
            subject: 'üìã Contratos pr√≥ximos a vencer',
            message: 'Hay 3 contratos de empleados que vencen en los pr√≥ximos 30 d√≠as. Revisar en el m√≥dulo de RRHH.',
            priority: 'high',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'role:hr',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
        showAutoNotification(notification);
    }
}

// Recordatorios de seguridad
function generateSafetyReminders() {
    const safetyTips = [
        'Recuerda usar siempre tu equipo de protecci√≥n personal',
        'Mant√©n tu √°rea de trabajo limpia y ordenada',
        'Reporta cualquier condici√≥n insegura inmediatamente',
        'Conoce las rutas de evacuaci√≥n de tu √°rea',
        'Participa activamente en los simulacros de emergencia'
    ];
    
    if (Math.random() > 0.8) { // 20% de probabilidad
        const tip = safetyTips[Math.floor(Math.random() * safetyTips.length)];
        const notification = {
            id: Date.now(),
            type: 'safety',
            subject: '‚ö†Ô∏è Recordatorio de Seguridad',
            message: tip,
            priority: 'medium',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'all',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
        showAutoNotification(notification);
    }
}

// Mostrar notificaci√≥n autom√°tica
function showAutoNotification(notification) {
    const autoList = document.getElementById('autoNotificationsList');
    if (!autoList) return;
    
    const notificationElement = document.createElement('div');
    notificationElement.style.cssText = `
        background: rgba(255,255,255,0.2); padding: 10px; border-radius: 5px;
        animation: slideIn 0.5s ease-out;
    `;
    
    notificationElement.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <strong>${notification.subject}</strong>
                <div style="font-size: 12px; opacity: 0.9; margin-top: 5px;">${notification.message}</div>
            </div>
            <span style="font-size: 10px; opacity: 0.7;">Hace 1 min</span>
        </div>
    `;
    
    autoList.insertBefore(notificationElement, autoList.firstChild);
    
    // Limitar a 5 notificaciones autom√°ticas visibles
    while (autoList.children.length > 5) {
        autoList.removeChild(autoList.lastChild);
    }
}

// Cargar y mostrar notificaciones
function loadNotifications() {
    const list = document.getElementById('notificationsList');
    if (!list) return;
    
    const filteredNotifications = notificationsState.currentFilter === 'all' 
        ? notificationsState.notifications
        : notificationsState.notifications.filter(n => {
            if (notificationsState.currentFilter === 'automatic') return n.automatic;
            return n.status === notificationsState.currentFilter;
        });
    
    if (filteredNotifications.length === 0) {
        list.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #999;">
                <div style="font-size: 48px; margin-bottom: 10px;">üì≠</div>
                <div>No hay notificaciones para mostrar</div>
            </div>
        `;
        return;
    }
    
    list.innerHTML = filteredNotifications.map(notification => `
        <div class="notification-item" style="border-bottom: 1px solid #f0f0f0; padding: 15px 0;">
            <div style="display: flex; justify-content: space-between; align-items: start;">
                <div style="flex: 1;">
                    <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 5px;">
                        <span style="font-size: 20px;">${getNotificationIcon(notification.type)}</span>
                        <strong style="color: #333;">${notification.subject}</strong>
                        ${notification.automatic ? '<span style="background: #6f42c1; color: white; padding: 2px 8px; border-radius: 3px; font-size: 10px;">AUTO</span>' : ''}
                        <span style="background: ${getPriorityColor(notification.priority)}; color: white; padding: 2px 8px; border-radius: 3px; font-size: 10px;">${notification.priority.toUpperCase()}</span>
                    </div>
                    <div style="color: #666; margin-bottom: 5px;">${notification.message}</div>
                    <div style="font-size: 12px; color: #999;">
                        Enviado: ${new Date(notification.sentAt || notification.createdAt).toLocaleString('es-ES')}
                        ${notification.readBy.length > 0 ? ` ‚Ä¢ Le√≠do por ${notification.readBy.length} personas` : ''}
                    </div>
                </div>
                <div style="display: flex; gap: 5px;">
                    <button onclick="markAsRead(${notification.id})" style="padding: 5px 10px; background: #007bff; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                        Marcar le√≠da
                    </button>
                    <button onclick="deleteNotification(${notification.id})" style="padding: 5px 10px; background: #dc3545; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 12px;">
                        Eliminar
                    </button>
                </div>
            </div>
        </div>
    `).join('');
}

// Actualizar estad√≠sticas
function updateStatistics() {
    const today = new Date().toDateString();
    const todayNotifications = notificationsState.notifications.filter(n => 
        new Date(n.sentAt || n.createdAt).toDateString() === today
    );
    
    document.getElementById('totalSentToday').textContent = todayNotifications.length;
    document.getElementById('totalPending').textContent = notificationsState.notifications.filter(n => n.status === 'pending').length;
    document.getElementById('totalRead').textContent = notificationsState.notifications.filter(n => n.readBy.length > 0).length;
    document.getElementById('autoGenerated').textContent = notificationsState.notifications.filter(n => n.automatic).length;
    document.getElementById('activeNotificationsCount').textContent = notificationsState.notifications.filter(n => n.status === 'sent' && n.readBy.length === 0).length;
}

// Filtrar notificaciones
function filterNotifications(filter) {
    notificationsState.currentFilter = filter;
    
    // Actualizar botones de tabs
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.style.background = '#f0f0f0';
        btn.style.color = '#333';
    });
    
    event.target.style.background = '#007bff';
    event.target.style.color = 'white';
    
    loadNotifications();
}

// Obtener icono seg√∫n tipo
function getNotificationIcon(type) {
    const icons = {
        general: 'üì¢',
        urgent: 'üö®',
        info: '‚ÑπÔ∏è',
        reminder: '‚è∞',
        celebration: 'üéâ',
        policy: 'üìã',
        training: 'üìö',
        safety: '‚ö†Ô∏è'
    };
    return icons[type] || 'üì¢';
}

// Obtener color seg√∫n prioridad
function getPriorityColor(priority) {
    const colors = {
        low: '#28a745',
        medium: '#ffc107',
        high: '#fd7e14',
        critical: '#dc3545'
    };
    return colors[priority] || '#6c757d';
}

// Marcar como le√≠da
function markAsRead(notificationId) {
    const notification = notificationsState.notifications.find(n => n.id === notificationId);
    if (notification && !notification.readBy.includes('current-user')) {
        notification.readBy.push('current-user');
        notification.status = 'read';
        loadNotifications();
        updateStatistics();
    }
}

// Eliminar notificaci√≥n
function deleteNotification(notificationId) {
    if (confirm('¬øEst√°s seguro de eliminar esta notificaci√≥n?')) {
        notificationsState.notifications = notificationsState.notifications.filter(n => n.id !== notificationId);
        loadNotifications();
        updateStatistics();
    }
}

// Mostrar plantillas
function showNotificationTemplates() {
    alert('üìã M√≥dulo de plantillas: Permite crear y gestionar plantillas reutilizables de notificaciones');
}

// Mostrar notificaciones programadas
function showScheduledNotifications() {
    const scheduled = notificationsState.scheduledNotifications;
    let content = '‚è∞ Notificaciones Programadas:\n\n';
    
    if (scheduled.length === 0) {
        content += 'No hay notificaciones programadas';
    } else {
        scheduled.forEach(n => {
            content += `- ${n.subject}\n  Programada para: ${new Date(n.scheduledFor).toLocaleString('es-ES')}\n\n`;
        });
    }
    
    alert(content);
}

// Configurar notificaciones autom√°ticas
function configureAutoNotifications() {
    const config = `
ü§ñ Notificaciones Autom√°ticas Configuradas:

‚úÖ Cumplea√±os de empleados - Diario
‚úÖ Vencimiento de contratos - Semanal  
‚úÖ Recordatorios de vacaciones - Mensual
‚úÖ Capacitaciones pendientes - Semanal
‚úÖ Documentos por vencer - Diario
‚úÖ Alertas de asistencia - Diario
‚úÖ Liquidaci√≥n de sueldos - Mensual
‚úÖ Feriados pr√≥ximos - Semanal
‚úÖ Recordatorios de seguridad - Diario

Todas las notificaciones autom√°ticas se generan seg√∫n las reglas del sistema.
    `;
    
    alert(config);
}

// Inicializar sistema
function initializeNotificationSystem() {
    // Cargar algunas notificaciones de ejemplo
    notificationsState.notifications = [
        {
            id: 1,
            type: 'general',
            subject: 'Bienvenido al nuevo sistema de notificaciones',
            message: 'El sistema de notificaciones empresariales est√° ahora activo. Todas las comunicaciones importantes se enviar√°n a trav√©s de este canal.',
            priority: 'medium',
            status: 'sent',
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'all',
            readBy: ['user1', 'user2']
        },
        {
            id: 2,
            type: 'urgent',
            subject: 'Actualizaci√≥n importante del sistema',
            message: 'El sistema estar√° en mantenimiento el s√°bado de 2:00 AM a 6:00 AM.',
            priority: 'high',
            status: 'sent',
            createdAt: new Date(Date.now() - 86400000).toISOString(),
            sentAt: new Date(Date.now() - 86400000).toISOString(),
            recipients: 'all',
            readBy: []
        },
        {
            id: 3,
            type: 'reminder',
            subject: 'Recordatorio: Entrega de informes mensuales',
            message: 'Por favor recuerden enviar sus informes mensuales antes del d√≠a 5.',
            priority: 'medium',
            status: 'pending',
            scheduledFor: new Date(Date.now() + 172800000).toISOString(),
            createdAt: new Date().toISOString(),
            recipients: 'role:supervisor',
            readBy: []
        }
    ];
    
    // Configurar actualizaciones autom√°ticas
    setInterval(() => {
        updateStatistics();
    }, 30000); // Cada 30 segundos
}

// Funciones adicionales para notificaciones autom√°ticas
function checkVacationReminders() {
    if (Math.random() > 0.95) {
        const notification = {
            id: Date.now(),
            type: 'reminder',
            subject: 'üèñÔ∏è Recordatorio de vacaciones',
            message: 'Tienes 15 d√≠as de vacaciones acumulados. Recuerda planificar tu descanso.',
            priority: 'low',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'specific',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
    }
}

function checkTrainingDue() {
    if (Math.random() > 0.93) {
        const notification = {
            id: Date.now(),
            type: 'training',
            subject: 'üìö Capacitaci√≥n pendiente',
            message: 'Tienes 2 capacitaciones obligatorias pendientes. Ingresa al m√≥dulo de capacitaciones.',
            priority: 'medium',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'specific',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
    }
}

function checkDocumentExpiry() {
    if (Math.random() > 0.92) {
        const notification = {
            id: Date.now(),
            type: 'urgent',
            subject: 'üìÑ Documentos por vencer',
            message: 'El carnet de conducir de 3 empleados vence en los pr√≥ximos 15 d√≠as.',
            priority: 'high',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'role:hr',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
    }
}

function checkAttendanceAlerts() {
    if (Math.random() > 0.88) {
        const notification = {
            id: Date.now(),
            type: 'info',
            subject: 'üìä Reporte de asistencia',
            message: 'El 98% de los empleados registraron su entrada correctamente hoy.',
            priority: 'low',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'role:admin',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
    }
}

function generatePayrollNotifications() {
    const today = new Date().getDate();
    if (today === 28 || today === 30) {
        if (Math.random() > 0.5) {
            const notification = {
                id: Date.now(),
                type: 'info',
                subject: 'üí∞ Liquidaci√≥n de sueldos lista',
                message: 'La liquidaci√≥n de sueldos del mes est√° disponible en el sistema.',
                priority: 'high',
                status: 'sent',
                automatic: true,
                createdAt: new Date().toISOString(),
                sentAt: new Date().toISOString(),
                recipients: 'all',
                readBy: []
            };
            
            notificationsState.notifications.push(notification);
            updateNotificationsList();
        }
    }
}

function generateHolidayReminders() {
    if (Math.random() > 0.94) {
        const holidays = [
            'D√≠a del Trabajador - 1 de Mayo',
            'D√≠a de la Independencia - 9 de Julio',
            'Navidad - 25 de Diciembre',
            'A√±o Nuevo - 1 de Enero'
        ];
        
        const holiday = holidays[Math.floor(Math.random() * holidays.length)];
        const notification = {
            id: Date.now(),
            type: 'reminder',
            subject: 'üìÖ Pr√≥ximo feriado',
            message: `Recuerda que se aproxima: ${holiday}`,
            priority: 'low',
            status: 'sent',
            automatic: true,
            createdAt: new Date().toISOString(),
            sentAt: new Date().toISOString(),
            recipients: 'all',
            readBy: []
        };
        
        notificationsState.notifications.push(notification);
        updateNotificationsList();
    }
}

function updateNotificationsList() {
    loadNotifications();
    updateStatistics();
}

// CSS Animations
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    
    .notification-item:hover {
        background: #f8f9fa;
    }
    
    .stat-card {
        transition: transform 0.3s;
    }
    
    .stat-card:hover {
        transform: scale(1.05);
    }
`;
document.head.appendChild(style);

// === M√ìDULO DE AUSENCIAS INTEGRADO ===
function showAbsenceNotifications() {
    console.log('üè• [ABSENCE] Mostrando gesti√≥n de notificaciones de ausencias');

    const content = document.getElementById('notificationsList');
    content.innerHTML = `
        <div class="absence-notifications-section">
            <div style="background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); padding: 20px; border-radius: 10px; color: #333; margin-bottom: 20px;">
                <h3 style="margin: 0 0 10px 0;">üè• Gesti√≥n de Notificaciones de Ausencias</h3>
                <p style="margin: 0; opacity: 0.8;">Administra solicitudes de inasistencia desde la app m√≥vil</p>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px;">
                <button onclick="showPendingAbsences()" style="background: #ffc107; color: #333; padding: 15px; border: none; border-radius: 8px; cursor: pointer;">
                    ‚è≥ Pendientes de Aprobaci√≥n
                </button>
                <button onclick="showApprovedAbsences()" style="background: #28a745; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer;">
                    ‚úÖ Aprobadas
                </button>
                <button onclick="showRejectedAbsences()" style="background: #dc3545; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer;">
                    ‚ùå Rechazadas
                </button>
            </div>

            <div style="background: white; border-radius: 10px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                <h4>üìã √öltimas Solicitudes de Ausencia</h4>
                <div class="absence-list" id="absenceList">
                    <div style="padding: 15px; border-left: 4px solid #ffc107; margin-bottom: 10px; background: #fff9c4;">
                        <div style="font-weight: bold;">Juan P√©rez - Ausencia M√©dica</div>
                        <div style="font-size: 14px; color: #666; margin: 5px 0;">Fecha: 25/09/2024 | Tipo: M√©dica | Estado: Pendiente</div>
                        <div style="font-size: 14px;">Motivo: Consulta m√©dica especializada</div>
                        <div style="margin-top: 10px; display: flex; gap: 10px;">
                            <button onclick="approveAbsence(1)" style="background: #28a745; color: white; padding: 5px 15px; border: none; border-radius: 4px; cursor: pointer;">‚úÖ Aprobar</button>
                            <button onclick="rejectAbsence(1)" style="background: #dc3545; color: white; padding: 5px 15px; border: none; border-radius: 4px; cursor: pointer;">‚ùå Rechazar</button>
                        </div>
                    </div>

                    <div style="padding: 15px; border-left: 4px solid #28a745; margin-bottom: 10px; background: #d4edda;">
                        <div style="font-weight: bold;">Mar√≠a Garc√≠a - Ausencia Personal</div>
                        <div style="font-size: 14px; color: #666; margin: 5px 0;">Fecha: 24/09/2024 | Tipo: Personal | Estado: Aprobada</div>
                        <div style="font-size: 14px;">Motivo: Tr√°mites personales</div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// === M√ìDULO DE CONSENTIMIENTOS FEHACIENTES INTEGRADO ===
function showLegalNotifications() {
    console.log('‚öñÔ∏è [LEGAL] Mostrando gesti√≥n de consentimientos fehacientes');

    const content = document.getElementById('notificationsList');
    content.innerHTML = `
        <div class="legal-notifications-section">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 10px; color: white; margin-bottom: 20px;">
                <h3 style="margin: 0 0 10px 0;">‚öñÔ∏è Consentimientos Fehacientes</h3>
                <p style="margin: 0; opacity: 0.9;">Gesti√≥n de consentimientos para comunicaciones legales</p>
            </div>

            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin-bottom: 20px;">
                <button onclick="showConsentStatus()" style="background: #17a2b8; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer;">
                    üìä Estado Consentimientos
                </button>
                <button onclick="sendLegalNotification()" style="background: #dc3545; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer;">
                    üì± Enviar Fehaciente
                </button>
                <button onclick="manageConsents()" style="background: #6f42c1; color: white; padding: 15px; border: none; border-radius: 8px; cursor: pointer;">
                    ‚öôÔ∏è Gestionar Consentimientos
                </button>
            </div>

            <div style="background: white; border-radius: 10px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                <h4>üìã Empleados y Estado de Consentimientos</h4>

                <div style="display: grid; gap: 10px; margin-top: 15px;">
                    <div style="padding: 15px; border: 1px solid #ddd; border-radius: 5px; display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: bold;">Juan P√©rez</div>
                            <div style="font-size: 14px; color: #666;">üì± SMS: ‚úÖ | üì± WhatsApp: ‚úÖ | üìß Email: ‚úÖ</div>
                        </div>
                        <button onclick="updateConsent('juan')" style="background: #28a745; color: white; padding: 5px 15px; border: none; border-radius: 4px; cursor: pointer;">
                            Actualizar
                        </button>
                    </div>

                    <div style="padding: 15px; border: 1px solid #ddd; border-radius: 5px; display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <div style="font-weight: bold;">Mar√≠a Garc√≠a</div>
                            <div style="font-size: 14px; color: #666;">üì± SMS: ‚ùå | üì± WhatsApp: ‚úÖ | üìß Email: ‚úÖ</div>
                        </div>
                        <button onclick="updateConsent('maria')" style="background: #ffc107; color: #333; padding: 5px 15px; border: none; border-radius: 4px; cursor: pointer;">
                            Configurar
                        </button>
                    </div>
                </div>

                <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px;">
                    <h5>üìä Estad√≠sticas de Consentimientos</h5>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 15px; margin-top: 10px;">
                        <div style="text-align: center;">
                            <div style="font-size: 24px; font-weight: bold; color: #28a745;">85%</div>
                            <div style="font-size: 14px; color: #666;">Con SMS</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 24px; font-weight: bold; color: #17a2b8;">92%</div>
                            <div style="font-size: 14px; color: #666;">Con WhatsApp</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 24px; font-weight: bold; color: #6f42c1;">98%</div>
                            <div style="font-size: 14px; color: #666;">Con Email</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// Actualizar el filtrado para incluir las nuevas categor√≠as
const originalFilterNotifications = window.filterNotifications;
function filterNotifications(filter) {
    console.log(`üì± [FILTER] Filtrando notificaciones: ${filter}`);

    // Actualizar botones activos
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.style.background = '#f0f0f0';
        btn.style.color = '#333';
    });
    if (event && event.target) {
        event.target.style.background = '#007bff';
        event.target.style.color = 'white';
    }

    notificationsState.currentFilter = filter;

    // Mostrar contenido espec√≠fico para cada categor√≠a
    if (filter === 'absence') {
        showAbsenceNotifications();
        return;
    } else if (filter === 'legal') {
        showLegalNotifications();
        return;
    }

    // Para otros filtros, usar la funci√≥n original
    if (originalFilterNotifications) {
        originalFilterNotifications(filter);
    } else {
        updateNotificationsList();
    }
}

// Funciones de ausencias
function approveAbsence(id) {
    alert(`Ausencia ${id} aprobada. Se enviar√° notificaci√≥n al empleado.`);
}

function rejectAbsence(id) {
    const reason = prompt('Motivo del rechazo:');
    if (reason) {
        alert(`Ausencia ${id} rechazada. Motivo: ${reason}`);
    }
}

// Funciones de consentimientos
function updateConsent(employeeId) {
    alert(`Abriendo configuraci√≥n de consentimientos para ${employeeId}`);
}

function sendLegalNotification() {
    alert('Modal de env√≠o de notificaci√≥n fehaciente (SMS/WhatsApp/Email con validez legal)');
}

// Funci√≥n para volver al grid de m√≥dulos
function goBackToModules() {
    const mainContent = document.getElementById('mainContent');
    const moduleGrid = document.querySelector('.module-grid');

    if (mainContent) {
        mainContent.style.display = 'none';
    }

    if (moduleGrid) {
        moduleGrid.style.display = 'grid';
    }
}

// Exportar funci√≥n principal y nuevas funciones
window.showNotificationsContent = showNotificationsContent;
window.filterNotifications = filterNotifications;
window.goBackToModules = goBackToModules;

console.log('‚úÖ [NOTIFICATIONS] Sistema Unificado de Notificaciones v3.0 - Todas las categor√≠as integradas');