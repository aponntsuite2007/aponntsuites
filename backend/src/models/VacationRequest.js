/**
 * Modelo para solicitudes de vacaciones y licencias
 */

const { DataTypes } = require('sequelize');

module.exports = (sequelize) => {
  const VacationRequest = sequelize.define('VacationRequest', {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true
    },
    
    // Relación con empleado
    userId: {
      type: DataTypes.UUID,
      allowNull: false,
      comment: 'ID del usuario/empleado que solicita'
    },
    
    // Tipo de solicitud
    requestType: {
      type: DataTypes.ENUM('vacation', 'extraordinary'),
      allowNull: false,
      comment: 'Tipo de solicitud: vacaciones o licencia extraordinaria'
    },
    
    extraordinaryLicenseId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'ID del tipo de licencia extraordinaria (si aplica)'
    },
    
    // Período solicitado
    startDate: {
      type: DataTypes.DATE,
      allowNull: false,
      comment: 'Fecha de inicio del período'
    },
    
    endDate: {
      type: DataTypes.DATE,
      allowNull: false,
      comment: 'Fecha de fin del período'
    },
    
    totalDays: {
      type: DataTypes.INTEGER,
      allowNull: false,
      comment: 'Total de días solicitados'
    },
    
    businessDays: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'Días hábiles dentro del período'
    },
    
    // Información de la solicitud
    reason: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Motivo o razón de la solicitud'
    },
    
    // Estado de la solicitud
    status: {
      type: DataTypes.ENUM('pending', 'approved', 'rejected', 'cancelled', 'active', 'completed'),
      defaultValue: 'pending',
      comment: 'Estado actual de la solicitud'
    },
    
    // Información de aprobación/rechazo
    approvedBy: {
      type: DataTypes.UUID,
      allowNull: true,
      comment: 'ID del usuario que aprobó/rechazó'
    },
    
    approvalDate: {
      type: DataTypes.DATE,
      allowNull: true,
      comment: 'Fecha de aprobación/rechazo'
    },
    
    approvalComments: {
      type: DataTypes.TEXT,
      allowNull: true,
      comment: 'Comentarios de la aprobación/rechazo'
    },
    
    // Cobertura de tareas
    coverageAssignments: {
      type: DataTypes.JSON,
      defaultValue: [],
      comment: 'Asignaciones de cobertura de tareas'
    },
    
    // Documentación de respaldo
    supportingDocuments: {
      type: DataTypes.JSON,
      defaultValue: [],
      comment: 'Archivos de documentación de respaldo'
    },
    
    // Sistema automático
    isAutoGenerated: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      comment: 'Si fue generada automáticamente por el sistema'
    },
    
    autoGenerationData: {
      type: DataTypes.JSON,
      allowNull: true,
      comment: 'Datos del algoritmo de generación automática'
    },
    
    // Compatibilidad y conflictos
    compatibilityScore: {
      type: DataTypes.DECIMAL(5, 2),
      allowNull: true,
      comment: 'Puntuación de compatibilidad con el cronograma'
    },
    
    conflicts: {
      type: DataTypes.JSON,
      defaultValue: [],
      comment: 'Lista de conflictos detectados'
    },
    
    // Seguimiento de modificaciones
    modificationHistory: {
      type: DataTypes.JSON,
      defaultValue: [],
      comment: 'Historial de modificaciones de la solicitud'
    }
    
  }, {
    tableName: 'vacation_requests',
    timestamps: true,
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    indexes: [
      {
        name: 'idx_vacation_req_user_status',
        fields: ['userId', 'status']
      },
      {
        name: 'idx_vacation_req_dates',
        fields: ['startDate', 'endDate', 'status']
      },
      {
        name: 'idx_vacation_req_type',
        fields: ['requestType', 'status']
      },
      {
        name: 'idx_vacation_req_approval',
        fields: ['approvedBy', 'approvalDate']
      }
    ]
  });

  return VacationRequest;
};