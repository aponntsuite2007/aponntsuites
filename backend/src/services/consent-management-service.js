/**
 * ‚öñÔ∏è CONSENT MANAGEMENT SERVICE - LEGAL COMPLIANCE
 * =================================================
 * Sistema profesional de gesti√≥n de consentimientos
 * Cumplimiento Ley 25.326 (Protecci√≥n de Datos Personales - Argentina)
 *
 * CR√çTICO: Este servicio maneja datos sensibles legales.
 * Toda operaci√≥n debe ser auditable y trazable.
 *
 * @version 1.0.0
 * @author Sistema Biom√©trico Enterprise
 * @license Cumplimiento Legal Ley 25.326
 */

const { sequelize } = require('../config/database');

class ConsentManagementService {
  constructor() {
    // Tipos de consentimiento permitidos
    this.CONSENT_TYPES = {
      EMOTIONAL_ANALYSIS: 'emotional_analysis',
      FATIGUE_DETECTION: 'fatigue_detection',
      WELLNESS_MONITORING: 'wellness_monitoring',
      AGGREGATED_REPORTS: 'aggregated_reports'
    };

    // Retenci√≥n de datos (por defecto)
    this.DEFAULT_RETENTION_DAYS = 90;

    console.log('‚öñÔ∏è [CONSENT-MANAGER] Servicio legal inicializado');
    console.log('   Cumplimiento: Ley 25.326 (Argentina)');
  }

  /**
   * Solicitar consentimiento a usuario
   * @param {Object} data - Datos del consentimiento
   * @returns {Promise<Object>} Resultado
   */
  async requestConsent(data) {
    try {
      const { userId, companyId, consentType, ipAddress, userAgent } = data;

      // Validar tipo de consentimiento
      if (!Object.values(this.CONSENT_TYPES).includes(consentType)) {
        return {
          success: false,
          error: 'INVALID_CONSENT_TYPE',
          message: `Tipo de consentimiento inv√°lido: ${consentType}`
        };
      }

      // Obtener texto legal correspondiente
      const consentText = this._getConsentText(consentType);

      // Guardar solicitud en BD
      // TODO: Implementar despu√©s de crear tabla
      console.log(`‚öñÔ∏è [CONSENT-MANAGER] Solicitud de consentimiento enviada`);
      console.log(`   Usuario: ${userId}`);
      console.log(`   Tipo: ${consentType}`);
      console.log(`   IP: ${ipAddress}`);

      return {
        success: true,
        consentType,
        consentText,
        requiresAction: true,
        timestamp: new Date()
      };

    } catch (error) {
      console.error('‚ùå [CONSENT-MANAGER] Error:', error.message);
      return {
        success: false,
        error: 'REQUEST_ERROR',
        message: error.message
      };
    }
  }

  /**
   * Registrar consentimiento otorgado
   * @param {Object} data - Datos del consentimiento
   * @returns {Promise<Object>} Resultado
   */
  async grantConsent(data) {
    try {
      const {
        userId,
        companyId,
        consentType,
        ipAddress,
        userAgent,
        acceptedAt
      } = data;

      // TODO: Guardar en BD
      console.log(`‚úÖ [CONSENT-MANAGER] Consentimiento otorgado`);
      console.log(`   Usuario: ${userId}`);
      console.log(`   Tipo: ${consentType}`);
      console.log(`   Fecha: ${acceptedAt || new Date()}`);
      console.log(`   IP: ${ipAddress}`);

      // Auditor√≠a obligatoria
      await this._logConsentAction({
        userId,
        companyId,
        action: 'GRANTED',
        consentType,
        ipAddress,
        userAgent,
        timestamp: acceptedAt || new Date()
      });

      return {
        success: true,
        message: 'Consentimiento registrado exitosamente',
        consentId: 'TEMP_ID', // TODO: ID real de BD
        expiresAt: this._calculateExpiration()
      };

    } catch (error) {
      console.error('‚ùå [CONSENT-MANAGER] Error:', error.message);
      return {
        success: false,
        error: 'GRANT_ERROR',
        message: error.message
      };
    }
  }

  /**
   * Revocar consentimiento (DERECHO DEL USUARIO)
   * @param {Object} data - Datos de revocaci√≥n
   * @returns {Promise<Object>} Resultado
   */
  async revokeConsent(data) {
    try {
      const {
        userId,
        companyId,
        consentType,
        reason,
        ipAddress,
        userAgent
      } = data;

      // TODO: Marcar como revocado en BD
      console.log(`üö´ [CONSENT-MANAGER] Consentimiento revocado`);
      console.log(`   Usuario: ${userId}`);
      console.log(`   Tipo: ${consentType}`);
      console.log(`   Motivo: ${reason || 'No especificado'}`);

      // Auditor√≠a obligatoria
      await this._logConsentAction({
        userId,
        companyId,
        action: 'REVOKED',
        consentType,
        reason,
        ipAddress,
        userAgent,
        timestamp: new Date()
      });

      // IMPORTANTE: Eliminar datos asociados seg√∫n Ley 25.326
      await this._deleteAssociatedData(userId, companyId, consentType);

      return {
        success: true,
        message: 'Consentimiento revocado exitosamente',
        dataDeleted: true,
        revokedAt: new Date()
      };

    } catch (error) {
      console.error('‚ùå [CONSENT-MANAGER] Error:', error.message);
      return {
        success: false,
        error: 'REVOKE_ERROR',
        message: error.message
      };
    }
  }

  /**
   * Verificar si usuario tiene consentimiento activo
   * @param {number} userId
   * @param {number} companyId
   * @param {string} consentType
   * @returns {Promise<boolean>}
   */
  async hasActiveConsent(userId, companyId, consentType) {
    try {
      // TODO: Consultar BD
      console.log(`üîç [CONSENT-MANAGER] Verificando consentimiento`);
      console.log(`   Usuario: ${userId}`);
      console.log(`   Tipo: ${consentType}`);

      // Por ahora retornar false (requerir√° consentimiento)
      return false;

    } catch (error) {
      console.error('‚ùå [CONSENT-MANAGER] Error verificando:', error.message);
      return false;
    }
  }

  /**
   * Obtener todos los consentimientos de un usuario
   * @param {number} userId
   * @param {number} companyId
   * @returns {Promise<Array>}
   */
  async getUserConsents(userId, companyId) {
    try {
      // TODO: Consultar BD
      console.log(`üìã [CONSENT-MANAGER] Obteniendo consentimientos de usuario ${userId}`);

      return {
        success: true,
        consents: []
      };

    } catch (error) {
      console.error('‚ùå [CONSENT-MANAGER] Error:', error.message);
      return {
        success: false,
        consents: []
      };
    }
  }

  /**
   * Obtener texto legal seg√∫n tipo de consentimiento
   * @private
   */
  _getConsentText(consentType) {
    const texts = {
      [this.CONSENT_TYPES.EMOTIONAL_ANALYSIS]: `
CONSENTIMIENTO INFORMADO PARA AN√ÅLISIS EMOCIONAL

Yo, en mi car√°cter de empleado/a, otorgo mi consentimiento LIBRE, EXPRESO E INFORMADO para que la empresa realice an√°lisis emocional mediante tecnolog√≠a de reconocimiento facial (Azure Face API - Microsoft).

INFORMACI√ìN CLARA:
‚Ä¢ Se analizar√°n 8 emociones: felicidad, tristeza, enojo, miedo, sorpresa, disgusto, desprecio y neutral
‚Ä¢ Los datos se utilizar√°n EXCLUSIVAMENTE para programas de bienestar laboral
‚Ä¢ Los datos ser√°n almacenados de forma segura por un m√°ximo de 90 d√≠as
‚Ä¢ NO se utilizar√°n para evaluaciones de desempe√±o ni decisiones laborales
‚Ä¢ Puedo REVOCAR este consentimiento en cualquier momento sin consecuencias

DERECHOS GARANTIZADOS (Ley 25.326):
‚Ä¢ Acceso: Puedo solicitar mis datos en cualquier momento
‚Ä¢ Rectificaci√≥n: Puedo corregir datos incorrectos
‚Ä¢ Supresi√≥n: Puedo solicitar eliminaci√≥n total de mis datos
‚Ä¢ Revocaci√≥n: Puedo retirar este consentimiento cuando desee

TECNOLOG√çA UTILIZADA:
‚Ä¢ Proveedor: Microsoft Azure Cognitive Services
‚Ä¢ Certificaciones: ISO 27001, SOC 2, GDPR compliant
‚Ä¢ Encriptaci√≥n: AES-256 para almacenamiento

CONTACTO PARA EJERCER DERECHOS:
‚Ä¢ Email: dpo@empresa.com
‚Ä¢ Responsable: Oficial de Protecci√≥n de Datos
      `.trim(),

      [this.CONSENT_TYPES.FATIGUE_DETECTION]: `
CONSENTIMIENTO INFORMADO PARA DETECCI√ìN DE FATIGA

Autorizo el an√°lisis de indicadores de fatiga mediante reconocimiento facial para prevenci√≥n de riesgos laborales.

QU√â SE ANALIZA:
‚Ä¢ Nivel de apertura ocular
‚Ä¢ Posici√≥n de la cabeza
‚Ä¢ Indicadores de cansancio facial

USO DE DATOS:
‚Ä¢ √öNICAMENTE prevenci√≥n de accidentes laborales
‚Ä¢ Alertas de seguridad al supervisor inmediato
‚Ä¢ Recomendaciones de descanso

Este consentimiento puede ser revocado en cualquier momento.
      `.trim(),

      [this.CONSENT_TYPES.WELLNESS_MONITORING]: `
CONSENTIMIENTO PARA MONITOREO DE BIENESTAR

Autorizo el an√°lisis de mi bienestar general para programas de salud ocupacional.

Los datos ser√°n utilizados de forma AGREGADA (nunca individual) para:
‚Ä¢ Programas de bienestar corporativo
‚Ä¢ Mejora del ambiente laboral
‚Ä¢ Prevenci√≥n de burnout

Puedo revocar este consentimiento sin consecuencias.
      `.trim(),

      [this.CONSENT_TYPES.AGGREGATED_REPORTS]: `
CONSENTIMIENTO PARA REPORTES AGREGADOS

Autorizo que mis datos emocionales sean incluidos en reportes agregados (m√≠nimo 10 personas) para an√°lisis de clima laboral.

GARANT√çAS:
‚Ä¢ Mis datos individuales NUNCA ser√°n identificables
‚Ä¢ Solo se generan promedios grupales
‚Ä¢ Anonimizaci√≥n total

Derecho a revocaci√≥n en cualquier momento.
      `.trim()
    };

    return texts[consentType] || 'Texto legal no disponible';
  }

  /**
   * Calcular fecha de expiraci√≥n (90 d√≠as por defecto)
   * @private
   */
  _calculateExpiration() {
    const expiration = new Date();
    expiration.setDate(expiration.getDate() + this.DEFAULT_RETENTION_DAYS);
    return expiration;
  }

  /**
   * Registrar acci√≥n de consentimiento (auditor√≠a)
   * @private
   */
  async _logConsentAction(data) {
    console.log(`üìù [AUDIT] Acci√≥n de consentimiento registrada`);
    console.log(`   Usuario: ${data.userId}`);
    console.log(`   Acci√≥n: ${data.action}`);
    console.log(`   Tipo: ${data.consentType}`);
    console.log(`   Timestamp: ${data.timestamp}`);
    // TODO: Guardar en tabla de auditor√≠a
  }

  /**
   * Eliminar datos asociados al consentimiento revocado
   * (Cumplimiento Ley 25.326 - Derecho de supresi√≥n)
   * @private
   */
  async _deleteAssociatedData(userId, companyId, consentType) {
    console.log(`üóëÔ∏è [DATA-DELETION] Eliminando datos asociados`);
    console.log(`   Usuario: ${userId}`);
    console.log(`   Tipo: ${consentType}`);
    // TODO: Eliminar registros de biometric_emotional_analysis
  }

  /**
   * Generar reporte de consentimientos (para auditor√≠a)
   */
  async generateComplianceReport(companyId, dateRange) {
    console.log(`üìä [COMPLIANCE] Generando reporte de cumplimiento`);
    // TODO: Implementar despu√©s de crear tablas
    return {
      success: true,
      report: {
        totalConsents: 0,
        activeConsents: 0,
        revokedConsents: 0,
        complianceScore: 100
      }
    };
  }

  /**
   * Verificar vencimiento de consentimientos
   * (Ejecutar como CRON job diario)
   */
  async checkExpiredConsents() {
    console.log(`‚è∞ [CRON] Verificando consentimientos vencidos...`);
    // TODO: Implementar despu√©s de crear tablas
    return {
      success: true,
      expiredCount: 0
    };
  }
}

module.exports = new ConsentManagementService();
