import 'package:flutter/foundation.dart';
import 'multi_tenant_security_service.dart';
import 'biometric_authentication_service.dart';
import 'realtime_notification_service.dart';
import 'api_service.dart';

/// üöÄ Gestor Principal de Servicios de la Aplicaci√≥n
/// Coordina todos los servicios de la aplicaci√≥n para funcionalidad completa
class AppServiceManager {
  static AppServiceManager? _instance;
  static AppServiceManager get instance => _instance ??= AppServiceManager._();

  AppServiceManager._();

  // Servicios principales
  late final MultiTenantSecurityService _securityService;
  late final BiometricAuthenticationService _biometricService;
  late final RealtimeNotificationService _notificationService;
  late final ApiService _apiService;

  bool _isInitialized = false;

  // Getters para acceder a los servicios
  MultiTenantSecurityService get security => _securityService;
  BiometricAuthenticationService get biometric => _biometricService;
  RealtimeNotificationService get notifications => _notificationService;
  ApiService get api => _apiService;

  /// üöÄ Inicializa todos los servicios de la aplicaci√≥n
  Future<bool> initialize({
    String? serverUrl,
  }) async {
    try {
      print('üöÄ [APP-MANAGER] Inicializando gestor de servicios...');

      // 1. Inicializar servicio de seguridad multi-tenant (base)
      _securityService = MultiTenantSecurityService();
      print('üõ°Ô∏è [APP-MANAGER] Servicio de seguridad inicializado');

      // 2. Inicializar servicio de API con contexto de seguridad
      _apiService = ApiService(_securityService);
      await _apiService.initialize();
      print('üåê [APP-MANAGER] Servicio de API inicializado');

      // 3. Inicializar servicio biom√©trico
      _biometricService = BiometricAuthenticationService(_securityService);
      await _biometricService.initialize();
      print('üîê [APP-MANAGER] Servicio biom√©trico inicializado');

      // 4. Inicializar servicio de notificaciones
      _notificationService = RealtimeNotificationService(_securityService);
      await _notificationService.initialize(serverUrl: serverUrl);
      print('üîî [APP-MANAGER] Servicio de notificaciones inicializado');

      // 5. Configurar manejadores de eventos entre servicios
      await _setupServiceIntegrations();

      _isInitialized = true;
      print('‚úÖ [APP-MANAGER] Todos los servicios inicializados correctamente');

      return true;
    } catch (e) {
      print('‚ùå [APP-MANAGER] Error inicializando servicios: $e');
      return false;
    }
  }

  /// üîó Configura integraciones entre servicios
  Future<void> _setupServiceIntegrations() async {
    try {
      print('üîó [APP-MANAGER] Configurando integraciones entre servicios...');

      // Integraci√≥n: Notificaciones de autenticaci√≥n biom√©trica
      _notificationService.registerMessageHandler('biometric_auth_request', (data) async {
        print('üîê [INTEGRATION] Solicitud de autenticaci√≥n biom√©trica recibida');
        // Aqu√≠ se podr√≠a mostrar una pantalla de autenticaci√≥n autom√°ticamente
      });

      // Integraci√≥n: Notificaciones de asistencia
      _notificationService.registerMessageHandler('attendance_reminder', (data) async {
        print('‚è∞ [INTEGRATION] Recordatorio de asistencia recibido');
      });

      // Integraci√≥n: Notificaciones de empresa
      _notificationService.registerMessageHandler('company_announcement', (data) async {
        print('üì¢ [INTEGRATION] Anuncio de empresa recibido: ${data['title']}');
      });

      print('‚úÖ [INTEGRATION] Integraciones configuradas correctamente');
    } catch (e) {
      print('‚ùå [INTEGRATION] Error configurando integraciones: $e');
    }
  }

  /// üîê Autentica usuario con m√∫ltiples m√©todos
  Future<AuthenticationResult> authenticateUser({
    String? username,
    String? password,
    String? companySlug,
    String? biometricType,
    String? employeeId,
  }) async {
    try {
      print('üîê [AUTH] Iniciando proceso de autenticaci√≥n...');

      // Intentar autenticaci√≥n tradicional primero
      if (username != null && password != null) {
        final response = await _apiService.login(username, password, companySlug: companySlug);

        if (response.isSuccess) {
          print('‚úÖ [AUTH] Autenticaci√≥n tradicional exitosa');
          return AuthenticationResult.success('traditional', response.data);
        }
      }

      // Si falla o no se proporciona, intentar autenticaci√≥n biom√©trica
      if (biometricType != null && employeeId != null) {
        print('üîê [AUTH] Intentando autenticaci√≥n biom√©trica: $biometricType');

        AuthResult? biometricResult;

        switch (biometricType.toLowerCase()) {
          case 'fingerprint':
            biometricResult = await _biometricService.authenticateFingerprint(employeeId);
            break;
          case 'face':
            biometricResult = await _biometricService.authenticateFace(employeeId);
            break;
          case 'qr':
            biometricResult = await _biometricService.authenticateQR();
            break;
          case 'pattern':
            // Para patr√≥n necesitar√≠amos el patr√≥n espec√≠fico
            print('‚ö†Ô∏è [AUTH] Autenticaci√≥n por patr√≥n requiere entrada espec√≠fica');
            break;
          case 'password':
            // Para contrase√±a necesitar√≠amos la contrase√±a espec√≠fica
            print('‚ö†Ô∏è [AUTH] Autenticaci√≥n por contrase√±a requiere entrada espec√≠fica');
            break;
          default:
            print('‚ùå [AUTH] Tipo biom√©trico no soportado: $biometricType');
        }

        if (biometricResult?.success == true) {
          print('‚úÖ [AUTH] Autenticaci√≥n biom√©trica exitosa');
          return AuthenticationResult.success(biometricType, {
            'biometric_auth': true,
            'employee_id': biometricResult!.employeeId,
            'method': biometricType,
          });
        }
      }

      print('‚ùå [AUTH] Fall√≥ la autenticaci√≥n');
      return AuthenticationResult.failure('Autenticaci√≥n fallida');
    } catch (e) {
      print('‚ùå [AUTH] Error en proceso de autenticaci√≥n: $e');
      return AuthenticationResult.failure('Error en autenticaci√≥n: $e');
    }
  }

  /// üìä Registra asistencia con m√∫ltiples validaciones
  Future<AttendanceResult> recordAttendance({
    required String type, // 'check_in' or 'check_out'
    required double latitude,
    required double longitude,
    String? biometricType,
    Map<String, dynamic>? biometricData,
  }) async {
    try {
      print('üìä [ATTENDANCE] Registrando asistencia tipo: $type');

      // Obtener ID de empleado del contexto
      final employeeId = _apiService._employeeId;
      if (employeeId == null) {
        return AttendanceResult.failure('No hay sesi√≥n de empleado activa');
      }

      // Registrar en la API
      final response = await _apiService.recordAttendance(
        employeeId: employeeId,
        type: type,
        latitude: latitude,
        longitude: longitude,
        biometricType: biometricType,
        biometricData: biometricData,
      );

      if (response.isSuccess) {
        print('‚úÖ [ATTENDANCE] Asistencia registrada exitosamente');

        // Enviar notificaci√≥n a la empresa
        await _notificationService.sendNotificationToCompany(
          'attendance_recorded',
          {
            'employee_id': employeeId,
            'type': type,
            'timestamp': DateTime.now().toIso8601String(),
            'location': {'latitude': latitude, 'longitude': longitude},
            'biometric_type': biometricType,
          },
        );

        return AttendanceResult.success(response.data);
      } else {
        print('‚ùå [ATTENDANCE] Error registrando asistencia: ${response.error}');
        return AttendanceResult.failure(response.error ?? 'Error desconocido');
      }
    } catch (e) {
      print('‚ùå [ATTENDANCE] Error en registro de asistencia: $e');
      return AttendanceResult.failure('Error: $e');
    }
  }

  /// üßπ Limpia todos los servicios
  Future<void> dispose() async {
    try {
      print('üßπ [APP-MANAGER] Limpiando servicios...');

      await _biometricService.dispose();
      await _notificationService.dispose();

      _isInitialized = false;
      print('‚úÖ [APP-MANAGER] Servicios limpiados correctamente');
    } catch (e) {
      print('‚ùå [APP-MANAGER] Error limpiando servicios: $e');
    }
  }

  /// üìä Estado general del sistema
  AppManagerStatus get status => AppManagerStatus(
    isInitialized: _isInitialized,
    hasCompanyContext: _securityService.hasTenantContext,
    currentCompanyId: _securityService.currentTenantId,
    isAuthenticated: _apiService._token != null,
    servicesStatus: {
      'security': _securityService.hasTenantContext,
      'biometric': _biometricService._isInitialized,
      'notifications': _notificationService.status.isInitialized,
      'api': _apiService._token != null,
    },
  );
}

/// üîê Resultado de autenticaci√≥n
class AuthenticationResult {
  final bool success;
  final String? method;
  final Map<String, dynamic>? data;
  final String? error;

  AuthenticationResult._(this.success, this.method, this.data, this.error);

  factory AuthenticationResult.success(String method, Map<String, dynamic>? data) {
    return AuthenticationResult._(true, method, data, null);
  }

  factory AuthenticationResult.failure(String error) {
    return AuthenticationResult._(false, null, null, error);
  }
}

/// üìä Resultado de registro de asistencia
class AttendanceResult {
  final bool success;
  final Map<String, dynamic>? data;
  final String? error;

  AttendanceResult._(this.success, this.data, this.error);

  factory AttendanceResult.success(Map<String, dynamic>? data) {
    return AttendanceResult._(true, data, null);
  }

  factory AttendanceResult.failure(String error) {
    return AttendanceResult._(false, null, error);
  }
}

/// üìä Estado del gestor de aplicaci√≥n
class AppManagerStatus {
  final bool isInitialized;
  final bool hasCompanyContext;
  final String? currentCompanyId;
  final bool isAuthenticated;
  final Map<String, bool> servicesStatus;

  AppManagerStatus({
    required this.isInitialized,
    required this.hasCompanyContext,
    required this.currentCompanyId,
    required this.isAuthenticated,
    required this.servicesStatus,
  });

  @override
  String toString() {
    return 'AppManagerStatus(initialized: $isInitialized, company: $currentCompanyId, authenticated: $isAuthenticated, services: $servicesStatus)';
  }
}