# ðŸš€ KUBERNETES DEPLOYMENT MANIFESTO EMPRESARIAL
# Biometric System - Enterprise Grade Infrastructure
# ================================================

apiVersion: v1
kind: Namespace
metadata:
  name: biometric-system
  labels:
    name: biometric-system
    tier: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: biometric-system-config
  namespace: biometric-system
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  MAX_CONCURRENCY: "50"
  CACHE_TIMEOUT: "300"
  POSTGRES_HOST: "postgres-service"
  REDIS_CLUSTER_HOSTS: "redis-cluster-0:6379,redis-cluster-1:6379,redis-cluster-2:6379"
  KAFKA_BROKERS: "kafka-0:9092,kafka-1:9092,kafka-2:9092"
  AI_ANALYSIS_ENABLED: "true"
  POSTGRESQL_PARTITIONING_ENABLED: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: biometric-system-api
  namespace: biometric-system
  labels:
    app: biometric-system
    tier: backend
    version: v1.0.0
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: biometric-system
      tier: backend
  template:
    metadata:
      labels:
        app: biometric-system
        tier: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: biometric-api
        image: biometric-system:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: biometric-system-config
              key: NODE_ENV
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: biometric-system-config
              key: POSTGRES_HOST
        - name: REDIS_CLUSTER_HOSTS
          valueFrom:
            configMapKeyRef:
              name: biometric-system-config
              key: REDIS_CLUSTER_HOSTS
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: biometric-system-config
              key: KAFKA_BROKERS
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: biometric-secrets
              key: postgres-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: biometric-secrets
              key: redis-password
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
          limits:
            cpu: "2000m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: app-logs
        emptyDir: {}
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: biometric-system-service
  namespace: biometric-system
  labels:
    app: biometric-system
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: biometric-system
    tier: backend

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: biometric-system-hpa
  namespace: biometric-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: biometric-system-api
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: biometric-system-ingress
  namespace: biometric-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - biometric-api.example.com
    secretName: biometric-tls-secret
  rules:
  - host: biometric-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: biometric-system-service
            port:
              number: 80

---
apiVersion: v1
kind: Secret
metadata:
  name: biometric-secrets
  namespace: biometric-system
type: Opaque
data:
  postgres-password: U2lzdGVtYUFzaXN0ZW5jaWEyMDI0Iw== # Base64 encoded
  redis-password: UmVkaXNDbHVzdGVyMjAyNCM=             # Base64 encoded
  jwt-secret: QmlvbWV0cmljSldUU2VjcmV0MjAyNCM=         # Base64 encoded

---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: biometric-system-monitor
  namespace: biometric-system
  labels:
    app: biometric-system
spec:
  selector:
    matchLabels:
      app: biometric-system
      tier: backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s