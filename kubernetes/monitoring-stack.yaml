#
# üìä PROFESSIONAL MONITORING STACK - FASE 5
# ==========================================
# Prometheus + Grafana + AlertManager para monitoreo completo
# M√©tricas biom√©tricas, alertas inteligentes, dashboards profesionales
# Fecha: 2025-09-26
# Versi√≥n: 2.0.0
#

apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    app: monitoring-stack
    version: v2.0.0

---
# ConfigMap para configuraci√≥n de Prometheus
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Prometheus self-monitoring
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Biometric Backend Services
      - job_name: 'biometric-backend'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - biometric-system
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: biometric-backend-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service

      # Redis Cluster
      - job_name: 'redis-cluster'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - redis
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: redis-cluster
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics

      # Kafka Cluster
      - job_name: 'kafka-cluster'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - kafka
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: kafka-cluster
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics

      # Node Exporter (sistema)
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: node-exporter

      # PostgreSQL
      - job_name: 'postgresql'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: postgresql-metrics

  # Reglas de alerta espec√≠ficas para biometr√≠a
  biometric-rules.yml: |
    groups:
      - name: biometric.rules
        rules:
          # Alerta por alta latencia en an√°lisis biom√©trico
          - alert: BiometricHighLatency
            expr: histogram_quantile(0.95, rate(biometric_analysis_duration_seconds_bucket[5m])) > 2
            for: 2m
            labels:
              severity: warning
              component: biometric
            annotations:
              summary: "Alta latencia en an√°lisis biom√©trico"
              description: "El 95% de los an√°lisis biom√©tricos est√°n tardando m√°s de 2 segundos en completarse."

          # Alerta por baja calidad de templates
          - alert: BiometricLowQuality
            expr: avg(biometric_template_quality_score) < 0.7
            for: 5m
            labels:
              severity: warning
              component: biometric
            annotations:
              summary: "Baja calidad promedio en templates biom√©tricos"
              description: "La calidad promedio de los templates biom√©tricos ha ca√≠do por debajo de 0.7."

          # Alerta por falla en servicios de IA
          - alert: AIServiceDown
            expr: up{job=~"biometric.*"} == 0
            for: 1m
            labels:
              severity: critical
              component: ai
            annotations:
              summary: "Servicio de IA biom√©trica ca√≠do"
              description: "El servicio {{ $labels.instance }} no est√° respondiendo."

          # Alerta por alto uso de memoria en Redis
          - alert: RedisHighMemory
            expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
            for: 5m
            labels:
              severity: warning
              component: redis
            annotations:
              summary: "Uso alto de memoria en Redis"
              description: "Redis est√° usando m√°s del 90% de su memoria m√°xima."

          # Alerta por retraso en Kafka
          - alert: KafkaConsumerLag
            expr: kafka_consumer_lag_sum > 1000
            for: 5m
            labels:
              severity: warning
              component: kafka
            annotations:
              summary: "Alto retraso en consumidores de Kafka"
              description: "Los consumidores de Kafka tienen un retraso de m√°s de 1000 mensajes."

          # Alerta por templates duplicados
          - alert: BiometricDuplicateTemplates
            expr: increase(biometric_duplicate_templates_total[1h]) > 10
            for: 0m
            labels:
              severity: info
              component: biometric
            annotations:
              summary: "Alto n√∫mero de templates duplicados detectados"
              description: "Se han detectado {{ $value }} templates duplicados en la √∫ltima hora."

          # Alerta por fallas de anti-spoofing
          - alert: AntiSpoofingFailures
            expr: rate(biometric_antispoofing_failures_total[5m]) > 0.1
            for: 2m
            labels:
              severity: critical
              component: security
            annotations:
              summary: "Alto √≠ndice de fallas en anti-spoofing"
              description: "Se detectan fallas en el sistema anti-spoofing a una tasa de {{ $value }} por segundo."

---
# PersistentVolumeClaim para datos de Prometheus
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: ssd-retain

---
# Deployment de Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--storage.tsdb.retention.time=30d'
          - '--web.console.libraries=/usr/share/prometheus/console_libraries'
          - '--web.console.templates=/usr/share/prometheus/consoles'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
          name: web
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: storage-volume
          mountPath: /prometheus
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-storage

---
# Service para Prometheus
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  type: ClusterIP

---
# ServiceAccount para Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring

---
# ClusterRole para Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# ClusterRoleBinding para Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring

---
# ConfigMap para configuraci√≥n de Grafana
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [grafana_net]
    url = https://grafana.net

    [log]
    mode = console

    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins

    [server]
    root_url = http://grafana.monitoring.svc.cluster.local:3000

    [security]
    admin_user = admin
    admin_password = biometric_grafana_2025

    [users]
    allow_sign_up = false

  # Datasource configuration
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true

  # Dashboard provisioning
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'biometric-dashboards'
        orgId: 1
        folder: 'Biometric System'
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /etc/grafana/provisioning/dashboards

---
# ConfigMap para dashboards de Grafana
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  biometric-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Biometric System Overview",
        "tags": ["biometric", "overview"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Biometric Analysis Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(biometric_analyses_total[5m])",
                "legendFormat": "Analysis/sec"
              }
            ],
            "yAxes": [
              {"label": "Analyses per second"}
            ],
            "xAxis": {"show": true},
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Template Quality Distribution",
            "type": "histogram",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, biometric_template_quality_bucket)",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.50, biometric_template_quality_bucket)",
                "legendFormat": "50th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "AI Service Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(biometric_ai_duration_seconds_bucket[5m]))",
                "legendFormat": "Harvard EmotiNet"
              },
              {
                "expr": "histogram_quantile(0.95, rate(mit_behavior_duration_seconds_bucket[5m]))",
                "legendFormat": "MIT Behavior"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          }
        ],
        "time": {"from": "now-1h", "to": "now"},
        "refresh": "5s"
      }
    }

  redis-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Redis Cluster Performance",
        "tags": ["redis", "cache"],
        "panels": [
          {
            "id": 1,
            "title": "Redis Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_memory_used_bytes",
                "legendFormat": "Used Memory"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Redis Operations/sec",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(redis_commands_processed_total[5m])",
                "legendFormat": "Commands/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          }
        ]
      }
    }

---
# PersistentVolumeClaim para datos de Grafana
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: ssd-retain

---
# Deployment de Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
          name: web
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "biometric_grafana_2025"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards/biometric
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards-config
        configMap:
          name: grafana-config
          items:
          - key: dashboards.yml
            path: dashboards.yml
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage

---
# Service para Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: web
  type: ClusterIP

---
# ConfigMap para AlertManager
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'biometric-alerts@siac.com'
      smtp_auth_username: 'biometric-alerts@siac.com'
      smtp_auth_password: 'alert_password'

    route:
      group_by: ['alertname', 'component']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'biometric-alerts'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          component: security
        receiver: 'security-alerts'

    receivers:
    - name: 'biometric-alerts'
      email_configs:
      - to: 'admin@siac.com'
        subject: 'Biometric System Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ .Labels }}
          {{ end }}

    - name: 'critical-alerts'
      email_configs:
      - to: 'admin@siac.com,cto@siac.com'
        subject: 'CRITICAL: Biometric System Alert'
        body: |
          CRITICAL ALERT in Biometric System!

          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Time: {{ .StartsAt }}
          {{ end }}

    - name: 'security-alerts'
      email_configs:
      - to: 'security@siac.com,admin@siac.com'
        subject: 'SECURITY ALERT: Biometric System'
        body: |
          SECURITY ALERT in Biometric System!

          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Component: {{ .Labels.component }}
          {{ end }}

---
# Deployment de AlertManager
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.26.0
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--web.external-url=http://alertmanager:9093'
        ports:
        - containerPort: 9093
          name: web
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/alertmanager
        - name: storage-volume
          mountPath: /alertmanager
      volumes:
      - name: config-volume
        configMap:
          name: alertmanager-config
      - name: storage-volume
        emptyDir: {}

---
# Service para AlertManager
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
spec:
  selector:
    app: alertmanager
  ports:
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: web
  type: ClusterIP

---
# Ingress para acceso externo a Grafana
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - monitoring.siac.com
    - grafana.siac.com
    secretName: monitoring-tls
  rules:
  - host: grafana.siac.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
  - host: monitoring.siac.com
    http:
      paths:
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090
      - path: /alertmanager
        pathType: Prefix
        backend:
          service:
            name: alertmanager
            port:
              number: 9093